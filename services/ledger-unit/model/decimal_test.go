package model

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_String(t *testing.T) {

	t.Log("nil")
	{
		var entity *Dec
		assert.Equal(t, "0.0", entity.String())
	}

	t.Log("zero")
	{
		assert.Equal(t, "0.0", new(Dec).String())
	}

	t.Log("-1.0")
	{
		entity := new(Dec)
		entity.SetString("-1.0")
		assert.Equal(t, "-1.0", entity.String())
	}

	t.Log("1.0")
	{
		entity := new(Dec)
		entity.SetString("1.0")
		assert.Equal(t, "1.0", entity.String())
	}

	t.Log("0.1")
	{
		entity := new(Dec)
		entity.SetString("0.1")
		assert.Equal(t, "0.1", entity.String())
	}

	t.Log("-0.1")
	{
		entity := new(Dec)
		entity.SetString("-0.1")
		assert.Equal(t, "-0.1", entity.String())
	}

}

func Test_Add(t *testing.T) {

	t.Log("1 + 0.2 = 1.2")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("1")
		b.SetString("0.2")
		a.Add(b)
		assert.Equal(t, "1.2", a.String())
	}

	t.Log("0.2 + 1 = 1.2")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("0.2")
		b.SetString("1")
		a.Add(b)
		assert.Equal(t, "1.2", a.String())
	}

	t.Log("1 + nil = 1")
	{
		a := new(Dec)
		var b *Dec

		a.SetString("1")
		a.Add(b)
		assert.Equal(t, "1", a.String())
	}

	t.Log("1 + 2 + 5 + 7 = 15")
	{
		a := new(Dec)
		b := new(Dec)
		c := new(Dec)
		d := new(Dec)

		a.SetString("1")
		b.SetString("2")
		c.SetString("5")
		d.SetString("7")

		a.Add(b)
		a.Add(c)
		a.Add(d)
		assert.Equal(t, "15", a.String())
	}

	t.Log("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002")
		b.SetString("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")
		a.Add(b)
		assert.Equal(t, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003", a.String())
	}

	t.Log("300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
		b.SetString("200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
		a.Add(b)
		assert.Equal(t, "300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", a.String())
	}

	t.Log("30000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000003")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("10000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000002")
		b.SetString("20000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000001")
		a.Add(b)
		assert.Equal(t, "30000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000003", a.String())
	}
}

func Test_Sub(t *testing.T) {
	t.Log("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003")
		b.SetString("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002")
		a.Sub(b)
		assert.Equal(t, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", a.String())
	}

	t.Log("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
		b.SetString("200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
		a.Sub(b)
		assert.Equal(t, "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", a.String())
	}

	t.Log("10000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000001")
	{
		a := new(Dec)
		b := new(Dec)

		a.SetString("30000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000003")
		b.SetString("20000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000002")
		a.Sub(b)
		assert.Equal(t, "10000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000001", a.String())
	}
}

func BenchmarkDec_String(b *testing.B) {
	entity := new(Dec)
	entity.SetString("300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

	b.ReportAllocs()
	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		entity.String()
	}
}
