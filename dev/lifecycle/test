#!/bin/bash

set -e
trap exit INT TERM

################################################################################

SOURCE=""
OUTPUT=""
while [ $# -gt 0 ] ; do
key="$1"
case $key in
  --source) SOURCE="$2";  shift; shift; ;;
  --output) OUTPUT="$2";  shift; shift; ;;
  *)                      shift;        ;;
esac
done

################################################################################

if [ -z "${SOURCE}" ] ; then
  (>&2 echo "[error] source package not provided")
  exit 1
fi

if [ -z "${OUTPUT}" ] ; then
  (>&2 echo "[error] output not provided")
  exit 1
fi

################################################################################

lifecycle::go::test() {
  local dir="$1"
  if [ -z ${dir} -o ! -d ${dir} ] ; then
    return
  fi
  local output="$2"
  local target=$(basename $dir)

  coverage_out=$(tempfile)
  test_out=$(tempfile)

  mkdir -p ${output}

  # run unit tests and collect coverage
  cd ${dir} && \
  \
  GOMAXPROCS=1 \
  go test \
    -v ./... \
    -coverprofile=${coverage_out} \
    -coverpkg=./... \
    -timeout=10s \
  | grc tee ${test_out}

  go2xunit \
    -fail \
    -input ${test_out} \
    -output ${output}/${target}-results.xml

  go tool cover \
    --html=${coverage_out} \
    -o ${output}/${target}-coverage.html

  # run only benchmarks
  cd ${dir} && \
  \
  GOMAXPROCS=1 \
    grc go test \
    -v ./... \
    -run=^$ \
    -bench=. \
    -benchmem \
    -timeout=1m
}

################################################################################

lifecycle::go::test \
  ${SOURCE} \
  ${OUTPUT}
