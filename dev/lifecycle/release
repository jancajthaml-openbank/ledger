#!/bin/bash

set -eu
trap exit INT TERM

################################################################################

VERSION=""
ACCESS_TOKEN=""
while [ $# -gt 0 ] ; do
key="$1"
case $key in
  -v|--version) VERSION="$2";       shift; shift; ;;
  -t|--token)   ACCESS_TOKEN="$2";  shift; shift; ;;
  *)                                shift;        ;;
esac
done

################################################################################

if [ -z "${VERSION}" ] ; then
  (>&2 echo "[error] version not provided")
  exit 1
fi

if [ -z "${ACCESS_TOKEN}" ] ; then
  (>&2 echo "[error] github access token not provided")
  exit 1
fi

################################################################################

REPO=$(git ls-remote --get-url)
REPO=${REPO%.git}
REPO=${REPO#*:}
REPO=${REPO#/}
REPO=${REPO#/}
REPO=${REPO#/}
REPO=${REPO#github.com}
REPO=${REPO#/}
REPO=${REPO}

################################################################################

lifecycle::release::info() {
  wget \
    -O - \
    -o /dev/null \
    --header "Authorization: token ${ACCESS_TOKEN}" \
    "https://api.github.com/repos/${REPO}/releases/tags/${VERSION}" \
  || echo '{ "id": null, "upload_url": "" }'
}

lifecycle::release::upload_uri() {
  UPLOAD_URL=$(lifecycle::release::info | jq -r .upload_url | sed -e "s/{?name,label}//")
  if [ -z "${UPLOAD_URL}" ] ; then
    (>&2 echo "[error] failed to obtain upload_url")
    exit 1
  fi
  echo "${UPLOAD_URL}"
}

lifecycle::release::upload_asset() {
  local uri="$1"
  if [ -z ${uri} ] ; then
    return
  fi
  local file="$2"
  if [ -z ${file} -o ! -f ${file} ] ; then
    return
  fi
  if [ ${file: -4} != ".deb" -a ! -x ${file} ] ; then
    return
  fi

  echo "[info] uploading $(basename ${file}) to Github release ${VERSION}"

  wget \
    -O /dev/null \
    -o /dev/null \
    --method POST \
    --body-file "${file}" \
    --header "Authorization: token ${ACCESS_TOKEN}" \
    --header "Content-Type: application/binary" \
    "${uri}?name=$(basename ${file})"
}

lifecycle::release::assert_release() {
  RELEASE_ID=$(lifecycle::release::info | jq -r .id)

  if [ "${RELEASE_ID}" != "null" ] ; then
    return
  fi

  echo "[info] creating new release ${VERSION} at Github"

PAYLOAD=$(cat <<-END
{
  "tag_name": "${VERSION}",
  "target_commitish": "main",
  "name": "${VERSION}",
  "body": "final ${VERSION} public release",
  "draft": false,
  "prerelease": false
}
END
)

  wget \
    -O /dev/null \
    -o /dev/null \
    --method POST \
    --header "Authorization: token ${ACCESS_TOKEN}" \
    --header="Content-Type: application/json" \
    --body-data="$(echo ${PAYLOAD})" \
    "https://api.github.com/repos/${REPO}/releases"
}

################################################################################

lifecycle::release::assert_release

upload_uri=$(lifecycle::release::upload_uri)

for asset in $(ls -d -1 $(pwd)/packaging/bin/*) ; do
  lifecycle::release::upload_asset ${upload_uri} ${asset}
done
