#!/bin/bash

set -eu
trap exit INT TERM

################################################################################

TARGET_ARCHITECTURE="linux/amd64"
TARGET_PACKAGE=""
OUTPUT=""
while [ $# -gt 0 ] ; do
key="$1"
case $key in
  --arch)   TARGET_ARCHITECTURE="$2"; shift; shift; ;;
  --pkg)    TARGET_PACKAGE="$2";      shift; shift; ;;
  --output) OUTPUT="$2";              shift; shift; ;;
  *)                                  shift;        ;;
esac
done

################################################################################

if [ -z "${TARGET_PACKAGE}" ] ; then
  (>&2 echo "[error] target package not provided")
  exit 1
fi

if [ -z "${OUTPUT}" ] ; then
  (>&2 echo "[error] output not provided")
  exit 1
fi

################################################################################

lifecycle::go::build() {
  local working_dir=${GOPATH}/src/github.com/jancajthaml-openbank/${TARGET_PACKAGE}
  local arch=${TARGET_ARCHITECTURE#*/}
  local platform=${TARGET_ARCHITECTURE%%/*}
  local output=${OUTPUT}/${TARGET_PACKAGE}-${platform}-${arch}

  if [ -f ${output} ] ; then
    rm -f ${output}
  fi

  cd ${working_dir}

  echo "[info] (${platform}/${arch}) cleaning"
  go clean

  echo "[info] (${platform}/${arch}) packaging ${TARGET_PACKAGE}"

  case ${arch} in

    armhf)
      GOOS=${platform} \
      GOARM=7 \
      GOARCH=arm \
      CGO_ENABLED=1 \
      GOFLAGS=-buildmode=pie \
      CC=arm-linux-gnueabihf-gcc \
      \
      go build -a -o ${output} || {
        (>&2 echo "[error] (${platform}/${arch}) unable to build")
        exit 1
      }
    ;;

    arm64)
      GOOS=${platform} \
      GOARCH=arm64 \
      CGO_ENABLED=1 \
      GOFLAGS=-buildmode=pie \
      CC=aarch64-linux-gnu-gcc \
      \
      go build -a -o ${output} || {
        (>&2 echo "[error] (${platform}/${arch}) unable to build")
        exit 1
      }
    ;;

    amd64)
      GOOS=${platform} \
      GOARCH=amd64 \
      CGO_ENABLED=1 \
      GOFLAGS=-buildmode=pie \
      CC=gcc \
      \
      go build -a -o ${output} || {
        (>&2 echo "[error] (${platform}/${arch}) unable to build")
        exit 1
      }
    ;;

    *)
      (>&2 echo "[error] (${platform}/${arch}) unsupported target")
      exit 1
    ;;

  esac

  chmod +x ${output}
  du -hs ${output}

  echo "[info] (${platform}/${arch}) done"
}

################################################################################

lifecycle::go::build
